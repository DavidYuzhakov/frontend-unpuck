import { authAPI } from '@/lib/api'
import { getTelegramUserData } from '@/lib/twa-utils'
import { User } from '@/types'
import { useCallback, useEffect, useState } from 'react'

export interface UseTelegramUserReturn {
  userData: User | null
  isLoading: boolean
  error: string | null
  refreshUserData: () => Promise<void>
  isInTelegram: boolean
}

interface IRawUserData {
  allow_write_to_pm: boolean
  first_name: string
  id: number
  is_premium: boolean
  language_code: string
  last_name: string
  photo_url: string
  username: string
}

const fallbackData: User = {
  id: 'test_user_' + Date.now(),
  firstName: 'Test',
  telegramId: '',
  lastName: 'User',
  username: 'test_user',
  role: 'BUYER' as const, // Fallback —Ä–æ–ª—å
  referralCode: '',
  isVerified: false,
  isActive: true,
  isBlocked: false,
}

export function useTelegramUser(): UseTelegramUserReturn {
  const [userData, setUserData] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isInTelegram, setIsInTelegram] = useState(false)
  const [isMounted, setIsMounted] = useState(false)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  useEffect(() => {
    setIsMounted(true)
  }, [])

  const getTelegramUserDataLocal =
    useCallback(async (): Promise<User | null> => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
        if (typeof window === 'undefined') {
          console.log('‚ùå –ù–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ')
          return null
        }

        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let tg = window.Telegram?.WebApp
        let attempts = 0
        const maxAttempts = 10

        while (!tg && attempts < maxAttempts) {
          console.log(
            `üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TWA...`
          )
          await new Promise((resolve) => setTimeout(resolve, 200))
          tg = window.Telegram?.WebApp
          attempts++
        }

        if (!tg) {
          console.log('‚ùå Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
          setIsInTelegram(false)
          return null
        }

        setIsInTelegram(true)
        console.log('‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω')

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TWA
        if (!tg.isExpanded) {
          console.log('üîß TWA –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º...')
          tg.expand()
        }

        await new Promise((resolve) => setTimeout(resolve, 300))
        const rawUserData: IRawUserData = getTelegramUserData()

        try {
          const requestData = {
            telegramId: String(rawUserData.id),
            firstName: rawUserData.first_name,
            lastName: rawUserData.last_name,
            username: rawUserData.username,
            photoUrl: rawUserData.photo_url,
          }

          const { data } = await authAPI.telegramAuth(requestData)
          return {
            ...data.user,
            // balance: 0,
            isBlocked: false,
            isActive: true,
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API:', error)
          return fallbackData
        }
      } catch (err) {
        const errorMessage =
          err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram:', errorMessage)
        setError(errorMessage)

        return fallbackData
      }
    }, [])

  const refreshUserData = useCallback(async () => {
    if (!isMounted) return

    try {
      setIsLoading(true)
      setError(null)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
      const telegramData = await getTelegramUserDataLocal()

      if (telegramData) {
        setUserData(telegramData)
      } else {
        setUserData(fallbackData)
      }
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      setError(errorMessage)
      setUserData(fallbackData)
    } finally {
      setIsLoading(false)
    }
  }, [isMounted])

  useEffect(() => {
    if (isMounted) {
      refreshUserData()
    }
  }, [isMounted])

  return {
    userData,
    isLoading,
    error,
    refreshUserData,
    isInTelegram,
  }
}
