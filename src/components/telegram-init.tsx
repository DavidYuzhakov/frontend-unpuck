'use client'

import { useEffect, useState } from 'react'

interface TelegramInitProps {
  children: React.ReactNode
}

export function TelegramInit({ children }: TelegramInitProps) {
  const [isReady, setIsReady] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const initTelegram = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if (typeof window === 'undefined') {
          console.log('‚ùå –ù–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ')
          setIsReady(true)
          return
        }

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let tg = window.Telegram?.WebApp
        let attempts = 0
        const maxAttempts = 20

        while (!tg && attempts < maxAttempts) {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TWA...`)
          await new Promise(resolve => setTimeout(resolve, 100))
          tg = window.Telegram?.WebApp
          attempts++
        }

        if (!tg) {
          console.log('‚ùå Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
          setError('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω')
          setIsReady(true)
          return
        }

        console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...')
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        tg.ready()
        tg.expand()
        tg.enableClosingConfirmation()
        
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 200))
        
        console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        console.log('üì± Init data:', tg.initData)
        console.log('üë§ User:', tg.initDataUnsafe?.user)
        console.log('üîç isExpanded:', tg.isExpanded)
        console.log('üîç platform:', tg.platform)
        console.log('üîç version:', tg.version)
        
        setIsReady(true)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', err)
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        setIsReady(true)
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initTelegram()
  }, [])

  if (!isReady) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  return <>{children}</>
}

