'use client'

import { useEffect, useState } from 'react'

interface TelegramRegistrationProps {
  onRegistrationComplete: (userData: any) => void
}

export function TelegramRegistration({ onRegistrationComplete }: TelegramRegistrationProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const initRegistration = async () => {
      const tg = (window as any).Telegram?.WebApp
      if (!tg) {
        setError('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
        return
      }

      console.log('üîò –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram...')
      setIsLoading(true)
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
        const userData = tg.initDataUnsafe?.user
        
        if (!userData) {
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          const urlParams = new URLSearchParams(window.location.search)
          const telegramId = urlParams.get('telegramId')
          const firstName = urlParams.get('firstName')
          const lastName = urlParams.get('lastName')
          const username = urlParams.get('username')
          
          if (telegramId) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:', { telegramId, firstName, lastName, username })
            const urlUserData = {
              id: telegramId,
              first_name: firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              last_name: lastName || '',
              username: username || undefined,
              photo_url: undefined
            }
            onRegistrationComplete(urlUserData)
            return
          }
          
          throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
        }
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram:', userData)
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const formattedUserData = {
          id: userData.id,
          first_name: userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          last_name: userData.last_name || '',
          username: userData.username || undefined,
          photo_url: userData.photo_url || undefined
        }
        
        onRegistrationComplete(formattedUserData)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err)
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      } finally {
        setIsLoading(false)
      }
    }

    initRegistration()
  }, [onRegistrationComplete])

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center p-6">
          <div className="text-red-500 text-xl mb-4">‚ùå</div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">–û—à–∏–±–∫–∞</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="text-center p-6">
        <div className="text-blue-500 text-6xl mb-4">üì±</div>
        <h1 className="text-2xl font-bold text-gray-800 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
        <p className="text-gray-600 mb-6">
          –°–æ–∑–¥–∞–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç...
        </p>
        {isLoading ? (
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            <span className="ml-2 text-gray-600">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>
          </div>
        ) : (
          <p className="text-sm text-gray-500">
            –ì–æ—Ç–æ–≤–æ!
          </p>
        )}
      </div>
    </div>
  )
}
