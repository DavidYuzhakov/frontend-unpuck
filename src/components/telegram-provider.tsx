'use client'

import { telegramAuth } from '@/lib/telegram-auth'
import { tokenManager } from '@/lib/token-manager'
import { useAuthStore } from '@/store/auth'
import { useEffect, useState } from 'react'

export function TelegramProvider({ children }: { children: React.ReactNode }) {
  const [isInitialized, setIsInitialized] = useState(false)
  const { login } = useAuthStore()

  useEffect(() => {
    const initAuth = async () => {
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const existingUser = tokenManager.getUser()
        const existingToken = tokenManager.getToken()
        
        if (existingUser && existingToken) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingUser)
          login(existingUser, existingToken)
          setIsInitialized(true)
          return
        }

        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ Telegram Mini App
        const authSuccess = await telegramAuth.authenticate()
        if (authSuccess) {
          console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App —É—Å–ø–µ—à–Ω–∞')
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ tokenManager
          const user = tokenManager.getUser()
          const token = tokenManager.getToken()
          if (user && token) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tokenManager:', user)
            login(user, token)
          }
        } else {
          console.log('‚ÑπÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App –Ω–µ —É–¥–∞–ª–∞—Å—å')
        }
        
        setIsInitialized(true)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
        setIsInitialized(true)
      }
    }

    initAuth()
  }, [login])

  if (!isInitialized) {
    return null
  }

  return <>{children}</>
}
