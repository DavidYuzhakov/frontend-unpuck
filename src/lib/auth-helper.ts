// –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ API
const API_BASE = '/api'
import { getTelegramUserData } from './twa-utils'
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

export interface AuthUser {
  id: string
  username?: string
  email?: string
  firstName: string
  lastName?: string
  avatar?: string
  role: 'BUYER' | 'SELLER' | 'BLOGGER' | 'MANAGER' | 'ADMIN'
  // balance: number // –£–ë–†–ê–õ–ò –ë–ê–õ–ê–ù–°
  referralCode: string
  isVerified: boolean
  telegramId?: string
}

export interface AuthResponse {
  user: AuthUser
  token: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
export const getExistingToken = (): string | null => {
  if (typeof window === 'undefined') return null
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
  const possibleKeys = ['auth_token', 'token', 'authToken', 'access_token']
  
  for (const key of possibleKeys) {
    const token = localStorage.getItem(key)
    if (token) {
      console.log(`üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ localStorage: ${key}`)
      return token
    }
  }
  
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
export const autoLoginWithExistingToken = async (): Promise<AuthResponse | null> => {
  try {
    const existingToken = getExistingToken()
    if (!existingToken) {
      console.log('üîç –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage')
      return null
    }

    // –í TWA –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    if (existingToken.startsWith('twa_')) {
      console.log('üîç TWA —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ')
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const savedUser = localStorage.getItem('auth_user')
      if (savedUser) {
        try {
          const user = JSON.parse(savedUser)
          console.log('‚úÖ TWA —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.firstName, user.lastName)
          return { user, token: existingToken }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseError)
          localStorage.removeItem('auth_token')
          localStorage.removeItem('auth_user')
          return null
        }
      } else {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage')
        localStorage.removeItem('auth_token')
        return null
      }
    }


    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
  const response = await fetch(`${API_BASE}/auth/me`, {
      headers: {
        'Authorization': `Bearer ${existingToken}`,
        'Content-Type': 'application/json'
      }
    })

    if (response.ok) {
      let user
      try {
        user = await response.json()
        console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.firstName, user.lastName)
        return { user, token: existingToken }
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', parseError)
        return null
      }
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status)
      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      localStorage.removeItem('auth_token')
      localStorage.removeItem('token')
      return null
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error)
    return null
  }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App
export const telegramAutoAuth = async (): Promise<AuthResponse | null> => {
  try {
    if (typeof window === 'undefined') return null
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === 'undefined') {
      console.log('‚ùå –ù–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
      return null
    }
    
    console.log('üîç TWA –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
    let userData = getTelegramUserData()
    
    if (!userData) {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Telegram WebApp')
      return null
    }
    
    // –í TWA —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
    // –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ backend API
    const telegramUser: AuthUser = {
      id: String(userData.id),
      telegramId: String(userData.id),
      firstName: userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      lastName: userData.last_name || undefined,
      username: userData.username || undefined,
      avatar: userData.photo_url || undefined,
      role: 'BUYER', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
      // balance: 0, // –£–ë–†–ê–õ–ò –ë–ê–õ–ê–ù–°
      referralCode: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
      isVerified: userData.is_premium || false,
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è TWA (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
    const token = `twa_${userData.id}_${Date.now()}`

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram WebApp:', telegramUser)
    console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è TWA:', token)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
    try {
      localStorage.setItem('auth_token', token)
      localStorage.setItem('auth_user', JSON.stringify(telegramUser))
      console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage')
      } catch (e) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e)
      }
      
      return {
      user: telegramUser,
      token: token
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error)
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞')
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : String(error),
      cause: error instanceof Error ? (error as any).cause : undefined
    })
    
    return null
  }
}

// –ê–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Å–ø–µ—Ä–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –∑–∞—Ç–µ–º Telegram Mini App
export const autoAuth = async (): Promise<AuthResponse | null> => {
  try {
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º autoAuth...')
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω...')
    const existingAuth = await autoLoginWithExistingToken()
    if (existingAuth) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω')
      return existingAuth
    }
    console.log('‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')

    console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram...')
    const tgAuth = await telegramAutoAuth()
    if (tgAuth) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞')
      return tgAuth
    }
    console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –Ω–µ —É–¥–∞–ª–∞—Å—å')

    console.log('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å')
    return null
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏ autoAuth:', typeof error)
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ autoAuth:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞')
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ autoAuth:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : String(error),
      cause: error instanceof Error ? (error as any).cause : undefined
    })
    return null
  }
}
