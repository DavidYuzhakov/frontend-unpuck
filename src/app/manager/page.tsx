'use client'

import { MainLayout } from '@/components/layouts/main-layout'
import { useTelegramData } from '@/components/providers/telegram-data-provider'
import { statisticsAPI } from '@/lib/api'
import {
  ChartBarIcon,
  CurrencyDollarIcon,
  ExclamationTriangleIcon,
  UserGroupIcon,
} from '@heroicons/react/24/outline'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'

function ManagerContent() {
  const router = useRouter()
  const {
    userData,
    isLoading: telegramLoading,
    isInTelegram,
  } = useTelegramData()

  const [stats, setStats] = useState({
    users: { total: 0, active: 0, pendingModeration: 0 },
    revenue: { total: 0, formatted: '‚ÇΩ0' },
    products: { total: 0, pendingModeration: 0 },
    campaigns: { active: 0 },
    deals: { total: 0, completed: 0 },
  })
  const [activities, setActivities] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç ManagerContent - userData:', userData)
  console.log('üîç ManagerContent - isInTelegram:', isInTelegram)
  console.log('üîç ManagerContent - telegramLoading:', telegramLoading)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const loadManagerData = async (retryCount = 0) => {
    try {
      setLoading(true)
      setError(null)

      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})`)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const statsData = await statisticsAPI.getManagerStats()
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', statsData)
      setStats(statsData.data)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î
      // –ò—Å—Ç–æ—á–Ω–∏–∫: /statistics/activities - –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü PostgreSQL:
      //
      // 1. users - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      //    - –ü–æ–ª—è: id, firstName, lastName, createdAt, role
      //    - –£—Å–ª–æ–≤–∏–µ: isActive = true, createdAt –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      //    - –õ–∏–º–∏—Ç: 3 –∑–∞–ø–∏—Å–∏
      //
      // 2. products - —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      //    - –ü–æ–ª—è: id, title, sellerId, createdAt, isActive
      //    - –£—Å–ª–æ–≤–∏–µ: isActive = false (–æ–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
      //    - –õ–∏–º–∏—Ç: 2 –∑–∞–ø–∏—Å–∏
      //
      // 3. deals - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
      //    - –ü–æ–ª—è: id, amount, updatedAt, status
      //    - –£—Å–ª–æ–≤–∏–µ: status = 'COMPLETED', updatedAt –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      //    - –õ–∏–º–∏—Ç: 3 –∑–∞–ø–∏—Å–∏
      //
      // 4. campaigns - –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
      //    - –ü–æ–ª—è: id, title, createdAt, status
      //    - –£—Å–ª–æ–≤–∏–µ: status = 'ACTIVE'
      //    - –õ–∏–º–∏—Ç: 2 –∑–∞–ø–∏—Å–∏
      //
      // –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
      // –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –∏–∫–æ–Ω–∫–∞–º–∏
      const activitiesData = await statisticsAPI.getRecentActivities()
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', activitiesData)
      setActivities(activitiesData.data)

      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error)

      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ 500 –∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if (error?.response?.status === 500 && retryCount < 2) {
        console.log(
          `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (${retryCount + 1}/2)`
        )
        setTimeout(() => {
          loadManagerData(retryCount + 1)
        }, 2000)
        return
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
      if (error?.response?.status === 401) {
        console.log('üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
        try {
          const { tokenManager } = await import('@/lib/token-manager')
          await tokenManager.autoAuth()
          // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          setTimeout(() => {
            loadManagerData(retryCount + 1)
          }, 1000)
          return
        } catch (authError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError)
        }
      }

      setError(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. ${
          error?.response?.status === 500
            ? '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
        }. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.`
      )
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadManagerData()
  }, [])

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    const handleFocus = () => {
      console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–∏–ª–∞ —Ñ–æ–∫—É—Å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
      loadManagerData()
    }

    const handleVisibilityChange = () => {
      if (!document.hidden) {
        console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
        loadManagerData()
      }
    }

    window.addEventListener('focus', handleFocus)
    document.addEventListener('visibilitychange', handleVisibilityChange)

    return () => {
      window.removeEventListener('focus', handleFocus)
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [])

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (userData && !telegramLoading) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
      loadManagerData()
    }
  }, [userData, telegramLoading])

  const statsCards = [
    {
      label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      value: stats.users.total.toString(),
      icon: UserGroupIcon,
      color: 'text-blue-600',
      subtitle: `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.users.active}`,
      additionalInfo: `–ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${
        stats.users.total > 0 ? Math.floor(Math.random() * 3) : 0
      }`,
    },
    {
      label: '–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
      value: stats.products.pendingModeration.toString(),
      icon: ExclamationTriangleIcon,
      color: 'text-orange-600',
      subtitle: '–¢–æ–≤–∞—Ä—ã',
      additionalInfo: `–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.products.total}`,
    },
    {
      label: '–í—ã—Ä—É—á–∫–∞',
      value: stats.revenue.formatted,
      icon: CurrencyDollarIcon,
      color: 'text-green-600',
      subtitle: `–°–¥–µ–ª–æ–∫: ${stats.deals.completed}`,
      additionalInfo: `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: ${stats.campaigns.active}`,
    },
  ]

  const quickActions = [
    {
      title: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      icon: ExclamationTriangleIcon,
      href: '/moderation',
      color: 'bg-orange-500 hover:bg-orange-600',
    },
    {
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      icon: UserGroupIcon,
      href: '/moderation/users',
      color: 'bg-blue-500 hover:bg-blue-600',
    },
    {
      title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      description: '–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      icon: ChartBarIcon,
      href: '/admin/stats',
      color: 'bg-purple-500 hover:bg-purple-600',
    },
  ]

  const handleQuickAction = (href: string) => {
    router.push(href)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new':
        return 'bg-green-100 text-green-800'
      case 'pending':
        return 'bg-yellow-100 text-yellow-800'
      case 'completed':
        return 'bg-blue-100 text-blue-800'
      case 'active':
        return 'bg-purple-100 text-purple-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'new':
        return '–ù–æ–≤–æ–µ'
      case 'pending':
        return '–û–∂–∏–¥–∞–µ—Ç'
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
      case 'active':
        return '–ê–∫—Ç–∏–≤–Ω–æ'
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'user_registration':
        return 'üë§'
      case 'product_pending':
        return 'üì¶'
      case 'new_product':
        return 'üõçÔ∏è'
      case 'deal_completed':
        return 'üí∞'
      case 'campaign_active':
        return 'üì¢'
      case 'new_message':
        return 'üí¨'
      default:
        return 'üìã'
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏
  if (loading && !error) {
    return (
      <MainLayout>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
            <p className="text-sm text-gray-500 mt-2">
              –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            </p>
          </div>
        </div>
      </MainLayout>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h1>
        <p className="text-gray-600 mt-1">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        </p>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="mb-4 bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg
                className="h-5 w-5 text-red-400"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3 flex-1">
              <p className="text-sm text-red-800">{error}</p>
              <button
                onClick={() => loadManagerData()}
                disabled={loading}
                className="mt-2 px-3 py-1 bg-red-100 text-red-800 rounded-md hover:bg-red-200 disabled:opacity-50 text-sm"
              >
                {loading ? '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {loading
          ? // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            [1, 2, 3].map((i) => (
              <div
                key={i}
                className="bg-white rounded-lg p-4 shadow-sm border animate-pulse"
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="h-4 bg-gray-200 rounded w-20 mb-2"></div>
                    <div className="h-8 bg-gray-200 rounded w-16"></div>
                    <div className="h-3 bg-gray-200 rounded w-24 mt-1"></div>
                  </div>
                  <div className="h-8 w-8 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))
          : statsCards.map((stat, index) => {
              const Icon = stat.icon
              return (
                <div
                  key={index}
                  className="bg-white rounded-lg p-4 shadow-sm border"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">
                        {stat.label}
                      </p>
                      <p className="text-2xl font-bold text-gray-900">
                        {stat.value}
                      </p>
                      {stat.subtitle && (
                        <p className="text-xs text-gray-500 mt-1">
                          {stat.subtitle}
                        </p>
                      )}
                      {stat.additionalInfo && (
                        <p className="text-xs text-gray-400 mt-1">
                          {stat.additionalInfo}
                        </p>
                      )}
                    </div>
                    <Icon className={`h-8 w-8 ${stat.color}`} />
                  </div>
                </div>
              )
            })}
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">
          –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {quickActions.map((action, index) => {
            const Icon = action.icon
            return (
              <button
                key={index}
                onClick={() => router.push(action.href)}
                className={`${action.color} text-white rounded-lg p-4 text-left transition-colors`}
              >
                <div className="flex items-center mb-2">
                  <Icon className="h-6 w-6 mr-2" />
                  <h3 className="font-semibold">{action.title}</h3>
                </div>
                <p className="text-sm opacity-90">{action.description}</p>
              </button>
            )
          })}
        </div>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="p-4 border-b">
          <h2 className="text-lg font-semibold text-gray-900">
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </h2>
        </div>
        <div className="divide-y">
          {loading ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            [1, 2, 3].map((i) => (
              <div
                key={i}
                className="p-4 flex items-center justify-between animate-pulse"
              >
                <div className="flex items-center">
                  <div className="w-2 h-2 rounded-full mr-3 bg-gray-200"></div>
                  <div>
                    <div className="h-4 bg-gray-200 rounded w-48 mb-1"></div>
                    <div className="h-3 bg-gray-200 rounded w-20"></div>
                  </div>
                </div>
                <div className="h-5 w-5 bg-gray-200 rounded"></div>
              </div>
            ))
          ) : activities.length > 0 ? (
            activities.map((activity) => (
              <div
                key={activity.id}
                className="p-4 flex items-center justify-between hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center">
                  <div className="text-lg mr-3">
                    {getActivityIcon(activity.type)}
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">
                      {activity.message}
                    </p>
                    <p className="text-xs text-gray-500">{activity.time}</p>
                  </div>
                </div>
                <span
                  className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                    activity.status
                  )}`}
                >
                  {getStatusText(activity.status)}
                </span>
              </div>
            ))
          ) : (
            <div className="p-8 text-center text-gray-500">
              <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default function ManagerPage() {
  return (
    <MainLayout>
      <ManagerContent />
    </MainLayout>
  )
}
