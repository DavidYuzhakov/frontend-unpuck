'use client'

import { MainLayout } from '@/components/layouts/main-layout'
import { profileAPI } from '@/lib/api'
import { tokenManager } from '@/lib/token-manager'
import { useAuthStore } from '@/store/auth'
import {
  ArrowDownIcon,
  ArrowLeftIcon,
  ArrowUpIcon,
} from '@heroicons/react/24/outline'
import Link from 'next/link'
import { useEffect, useState } from 'react'
// toast removed

interface Transaction {
  id: string
  type: 'income' | 'expense'
  amount: number
  description: string
  status: 'completed' | 'pending' | 'failed'
  createdAt: string
  category: string
  paymentMethod?: string
}

export default function TransactionsPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [transactions, setTransactions] = useState<Transaction[]>([])
  const { login } = useAuthStore()

  useEffect(() => {
    loadTransactions()
  }, [])

  const loadTransactions = async () => {
    try {
      setIsLoading(true)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
      if (!tokenManager.isAuthenticated()) {
        console.log(
          'üîê –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...'
        )
        const authResult = await tokenManager.autoAuth()
        if (authResult) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ store –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          login(authResult.user, authResult.token)
          console.log(
            'üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:',
            authResult.user.firstName,
            authResult.user.lastName
          )
        }
      } else {
        console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
      }

      const response = await profileAPI.getTransactions()
      console.log('üìä –û—Ç–≤–µ—Ç API:', response.data)

      if (response.data) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ allActivity
        const allActivity = response.data.allActivity || []
        const transactions = allActivity.map((item: any) => ({
          id: item.id,
          type: getTransactionType(item.type),
          amount: Number(item.amount),
          description: item.description || getTransactionDescription(item.type),
          status: item.status.toLowerCase(),
          createdAt: item.createdAt,
          category: getTransactionCategory(item.type),
          paymentMethod:
            item.paymentMethod || getPaymentMethodFromType(item.type),
        }))

        setTransactions(transactions)
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions)
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
      if (error.response?.status === 401) {
        console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ')
        setTransactions([
          {
            id: '1',
            type: 'income',
            amount: 5000,
            description: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ "iPhone 15 Pro"',
            status: 'completed',
            createdAt: '2024-01-15T10:30:00Z',
            category: '–ü—Ä–æ–¥–∞–∂–∞',
            paymentMethod: 'card',
          },
          {
            id: '2',
            type: 'expense',
            amount: 1500,
            description: '–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ "AirPods Pro"',
            status: 'completed',
            createdAt: '2024-01-14T15:20:00Z',
            category: '–ü–æ–∫—É–ø–∫–∞',
            paymentMethod: 'wallet',
          },
          {
            id: '3',
            type: 'income',
            amount: 2500,
            description: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è',
            status: 'completed',
            createdAt: '2024-01-13T09:15:00Z',
            category: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
            paymentMethod: 'bank',
          },
        ])
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        console.error(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.'
        )
        setTransactions([])
      }
    } finally {
      setIsLoading(false)
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const getTransactionType = (type: string): 'income' | 'expense' => {
    switch (type) {
      case 'DEPOSIT':
      case 'REFERRAL':
      case 'COMMISSION':
        return 'income'
      case 'WITHDRAWAL':
      case 'PAYMENT':
      case 'CAMPAIGN_PAYMENT':
        return 'expense'
      default:
        return 'expense'
    }
  }

  const getTransactionDescription = (type: string): string => {
    switch (type) {
      case 'DEPOSIT':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'
      case 'WITHDRAWAL':
        return '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'
      case 'COMMISSION':
        return '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
      case 'REFERRAL':
        return '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è'
      case 'CAMPAIGN_PAYMENT':
        return '–û–ø–ª–∞—Ç–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏'
      case 'PAYMENT':
        return '–ü–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä'
      default:
        return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'
    }
  }

  const getTransactionCategory = (type: string): string => {
    switch (type) {
      case 'DEPOSIT':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
      case 'WITHDRAWAL':
        return '–í—ã–≤–æ–¥'
      case 'COMMISSION':
        return '–ö–æ–º–∏—Å—Å–∏—è'
      case 'REFERRAL':
        return '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ'
      case 'CAMPAIGN_PAYMENT':
        return '–†–µ–∫–ª–∞–º–∞'
      case 'PAYMENT':
        return '–ü–æ–∫—É–ø–∫–∞'
      default:
        return '–î—Ä—É–≥–æ–µ'
    }
  }

  const getPaymentMethodFromType = (type: string): string => {
    switch (type) {
      case 'DEPOSIT':
      case 'WITHDRAWAL':
        return 'card'
      case 'COMMISSION':
      case 'REFERRAL':
        return 'bank'
      case 'CAMPAIGN_PAYMENT':
      case 'PAYMENT':
        return 'wallet'
      default:
        return 'card'
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'text-green-600 bg-green-50'
      case 'pending':
        return 'text-yellow-600 bg-yellow-50'
      case 'failed':
        return 'text-red-600 bg-red-50'
      default:
        return 'text-gray-600 bg-gray-50'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
      case 'pending':
        return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
      case 'failed':
        return '–û—à–∏–±–∫–∞'
      default:
        return status
    }
  }

  const getTypeIcon = (type: string) => {
    return type === 'income' ? (
      <ArrowUpIcon className="h-5 w-5 text-green-500" />
    ) : (
      <ArrowDownIcon className="h-5 w-5 text-red-500" />
    )
  }

  const getTypeColor = (type: string) => {
    return type === 'income' ? 'text-green-600' : 'text-red-600'
  }

  const getPaymentMethodIcon = (method?: string) => {
    switch (method) {
      case 'card':
        return 'üí≥'
      case 'wallet':
        return 'üí∞'
      case 'bank':
        return 'üè¶'
      case 'crypto':
        return '‚Çø'
      default:
        return 'üí≥'
    }
  }

  if (isLoading) {
    return (
      <MainLayout>
        <div className="min-h-screen bg-white flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </MainLayout>
    )
  }

  return (
    <MainLayout>
      <div className="min-h-screen bg-white">
        {/* Header */}
        <div className="sticky top-0 z-10 bg-white border-b border-gray-200 px-4 py-3">
          <div className="flex items-center space-x-4">
            <Link
              href="/profile"
              className="p-2 -ml-2 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <ArrowLeftIcon className="h-6 w-6 text-gray-600" />
            </Link>
            <h1 className="text-xl font-bold text-gray-900">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h1>
          </div>
        </div>

        {/* Transactions List - Full Screen */}
        <div className="px-4 py-4">
          {transactions.length === 0 ? (
            <div className="text-center py-16">
              <p className="text-gray-500 text-lg">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
          ) : (
            <div className="space-y-3">
              {transactions.map((transaction) => (
                <div
                  key={transaction.id}
                  className="bg-white rounded-lg p-4 shadow-sm border border-gray-200"
                >
                  <div className="flex items-start justify-between gap-3">
                    <div className="flex items-start space-x-3 flex-1 min-w-0">
                      <div className="flex-shrink-0 mt-0.5">
                        {getTypeIcon(transaction.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h3 className="text-sm font-medium text-gray-900 break-words">
                          {transaction.description}
                        </h3>
                        <div className="flex items-center space-x-2 mt-1">
                          <span className="text-xs text-gray-500">
                            {transaction.category}
                          </span>
                          {transaction.paymentMethod && (
                            <>
                              <span className="text-xs text-gray-400">‚Ä¢</span>
                              <span className="text-xs text-gray-500">
                                {getPaymentMethodIcon(
                                  transaction.paymentMethod
                                )}
                              </span>
                            </>
                          )}
                        </div>
                        <p className="text-xs text-gray-400 mt-1">
                          {new Date(transaction.createdAt).toLocaleDateString(
                            'ru-RU',
                            {
                              day: '2-digit',
                              month: '2-digit',
                              year: 'numeric',
                              hour: '2-digit',
                              minute: '2-digit',
                            }
                          )}
                        </p>
                      </div>
                    </div>
                    <div className="text-right flex-shrink-0">
                      <p
                        className={`text-lg font-semibold ${getTypeColor(
                          transaction.type
                        )} whitespace-nowrap`}
                      >
                        {transaction.type === 'income' ? '+' : '-'}
                        {transaction.amount.toLocaleString()} ‚ÇΩ
                      </p>
                      <span
                        className={`inline-block px-2 py-1 text-xs rounded-full ${getStatusColor(
                          transaction.status
                        )} whitespace-nowrap mt-1`}
                      >
                        {getStatusText(transaction.status)}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  )
}
