'use client'

import { MainLayout } from '@/components/layouts/main-layout'
import { campaignsAPI } from '@/lib/api'
import { useAuthStore } from '@/store/auth'
import { ArrowLeftIcon, MegaphoneIcon } from '@heroicons/react/24/outline'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

interface CreateCampaignData {
  title: string
  description: string
  type: 'product' | 'channel'
  budget: number
  pricePerClick: number
  maxClicks?: number
  startDate?: string
  endDate?: string
  productId?: string
  channelId?: string
}

function CreateCampaignContent() {
  const router = useRouter()
  const { user } = useAuthStore()
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState<CreateCampaignData>({
    title: '',
    description: '',
    type: 'product',
    budget: 0,
    pricePerClick: 0,
    maxClicks: undefined,
    startDate: '',
    endDate: '',
    productId: '',
    channelId: '',
  })

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]:
        name === 'budget' || name === 'pricePerClick' || name === 'maxClicks'
          ? parseFloat(value) || 0
          : value,
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.title || !formData.budget || !formData.pricePerClick) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    try {
      setLoading(true)
      console.log('üöÄ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:', formData)
      console.log('üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)

      const result = await campaignsAPI.createCampaign(formData)
      console.log('‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result)

      router.push('/blogger')
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', error)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message)
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <div className="flex items-center mb-4">
          <button
            onClick={() => router.back()}
            className="mr-4 p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <ArrowLeftIcon className="h-5 w-5" />
          </button>
          <h1 className="text-2xl font-bold text-gray-900">–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é</h1>
        </div>
        <p className="text-gray-600">
          –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤
        </p>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <div className="max-w-2xl mx-auto">
        <form
          onSubmit={handleSubmit}
          className="bg-white rounded-lg shadow-sm border p-6"
        >
          <div className="space-y-6">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ */}
            <div>
              <label
                htmlFor="title"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                required
              />
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div>
              <label
                htmlFor="description"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
              />
            </div>

            {/* –¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ */}
            <div>
              <label
                htmlFor="type"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ *
              </label>
              <select
                id="type"
                name="type"
                value={formData.type}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required
              >
                <option value="product">–¢–æ–≤–∞—Ä</option>
                <option value="channel">–ö–∞–Ω–∞–ª</option>
              </select>
            </div>

            {/* –ë—é–¥–∂–µ—Ç */}
            <div>
              <label
                htmlFor="budget"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –ë—é–¥–∂–µ—Ç (‚ÇΩ) *
              </label>
              <input
                type="number"
                id="budget"
                name="budget"
                value={formData.budget}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="0.00"
                required
              />
            </div>

            {/* –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ */}
            <div>
              <label
                htmlFor="pricePerClick"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ (‚ÇΩ) *
              </label>
              <input
                type="number"
                id="pricePerClick"
                name="pricePerClick"
                value={formData.pricePerClick}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="0.00"
                required
              />
            </div>

            {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ */}
            <div>
              <label
                htmlFor="maxClicks"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
              </label>
              <input
                type="number"
                id="maxClicks"
                name="maxClicks"
                value={formData.maxClicks || ''}
                onChange={handleInputChange}
                min="1"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
              />
            </div>

            {/* –î–∞—Ç—ã */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor="startDate"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                </label>
                <input
                  type="datetime-local"
                  id="startDate"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div>
                <label
                  htmlFor="endDate"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                </label>
                <input
                  type="datetime-local"
                  id="endDate"
                  name="endDate"
                  value={formData.endDate}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex justify-end space-x-4 pt-6 border-t">
              <button
                type="button"
                onClick={() => router.back()}
                className="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                disabled={loading}
                className="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –°–æ–∑–¥–∞–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <MegaphoneIcon className="h-4 w-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
                  </>
                )}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}

export default function CreateCampaignPage() {
  return (
    <MainLayout>
      <CreateCampaignContent />
    </MainLayout>
  )
}
