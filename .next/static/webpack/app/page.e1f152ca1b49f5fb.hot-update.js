"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   academyAPI: function() { return /* binding */ academyAPI; },\n/* harmony export */   adminAPI: function() { return /* binding */ adminAPI; },\n/* harmony export */   affiliateAPI: function() { return /* binding */ affiliateAPI; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   campaignsAPI: function() { return /* binding */ campaignsAPI; },\n/* harmony export */   clearCache: function() { return /* binding */ clearCache; },\n/* harmony export */   dealsAPI: function() { return /* binding */ dealsAPI; },\n/* harmony export */   imagesAPI: function() { return /* binding */ imagesAPI; },\n/* harmony export */   moderationAPI: function() { return /* binding */ moderationAPI; },\n/* harmony export */   notificationsAPI: function() { return /* binding */ notificationsAPI; },\n/* harmony export */   paymentAPI: function() { return /* binding */ paymentAPI; },\n/* harmony export */   productsAPI: function() { return /* binding */ productsAPI; },\n/* harmony export */   profileAPI: function() { return /* binding */ profileAPI; },\n/* harmony export */   socialAPI: function() { return /* binding */ socialAPI; },\n/* harmony export */   statisticsAPI: function() { return /* binding */ statisticsAPI; },\n/* harmony export */   supportAPI: function() { return /* binding */ supportAPI; },\n/* harmony export */   telegramAPI: function() { return /* binding */ telegramAPI; },\n/* harmony export */   transactionsAPI: function() { return /* binding */ transactionsAPI; },\n/* harmony export */   uploadAPI: function() { return /* binding */ uploadAPI; },\n/* harmony export */   usersAPI: function() { return /* binding */ usersAPI; },\n/* harmony export */   verificationAPI: function() { return /* binding */ verificationAPI; }\n/* harmony export */ });\n/* harmony import */ var _store_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/store/auth */ \"(app-pages-browser)/./src/store/auth.ts\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _token_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token-manager */ \"(app-pages-browser)/./src/lib/token-manager.ts\");\n\n\n\nconst API_URL = \"/api\";\nconst isBrowser = \"object\" !== \"undefined\";\nconst BASE_URL = isBrowser ? \"/api\" : API_URL;\n// Кэш для GET запросов\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 минут\n;\n// Функция для проверки кэша\nconst getCachedData = (key)=>{\n    const cached = cache.get(key);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n        return cached.data;\n    }\n    return null;\n};\n// Функция для сохранения в кэш\nconst setCachedData = (key, data)=>{\n    cache.set(key, {\n        data,\n        timestamp: Date.now()\n    });\n};\n// Функция для очистки кэша\nconst clearCache = ()=>{\n    cache.clear();\n};\nconst api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: BASE_URL,\n    timeout: 10000,\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"max-age=300\"\n    }\n});\napi.interceptors.request.use(async (config)=>{\n    var _config_url;\n    let token = _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.getToken();\n    if (!token) {\n        console.log(\"⚠️ Токен не найден для запроса:\", config.url);\n        const authResult = await _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.autoAuth();\n        if (authResult) {\n            console.log(\"✅ Авторизация через Telegram успешна\");\n            token = _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.getToken();\n        } else {\n            console.log(\"❌ Авторизация не выполнена, запрос может быть отклонён (401)\");\n        }\n    }\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    } else {\n        console.log(\"❌ Токен не найден, запрос будет отправлен без авторизации\");\n    }\n    if (config.method === \"get\" && !((_config_url = config.url) === null || _config_url === void 0 ? void 0 : _config_url.includes(\"/statistics/\"))) {\n        const cacheKey = \"\".concat(config.url, \"?\").concat(JSON.stringify(config.params || {}));\n        const cachedData = getCachedData(cacheKey);\n        if (cachedData) {\n            return {\n                ...config,\n                data: cachedData,\n                fromCache: true\n            };\n        }\n    }\n    return config;\n}, (error)=>{\n    console.log(\"❌ Ошибка в request interceptor:\", error);\n    return Promise.reject(error);\n});\n// Response interceptor for error handling and caching\napi.interceptors.response.use((response)=>{\n    // Кэшируем успешные GET запросы\n    if (response.config.method === \"get\" && response.status === 200) {\n        const cacheKey = \"\".concat(response.config.url, \"?\").concat(JSON.stringify(response.config.params || {}));\n        setCachedData(cacheKey, response.data);\n    }\n    return response;\n}, (error)=>{\n    var _error_config, _response_data;\n    const { response } = error;\n    console.log(\"❌ API Error:\", (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url, \"Status:\", response === null || response === void 0 ? void 0 : response.status);\n    console.log(\"\\uD83D\\uDCC4 Error response:\", response === null || response === void 0 ? void 0 : response.data);\n    if (error.code === \"ERR_NETWORK\") {\n        console.warn(\"Сетевая ошибка. Проверьте доступность API:\", API_URL);\n        return Promise.reject(error);\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n        // Token expired or invalid - очищаем глобальный токен\n        _token_manager__WEBPACK_IMPORTED_MODULE_1__.tokenManager.clearAuth();\n        _store_auth__WEBPACK_IMPORTED_MODULE_0__.useAuthStore.getState().logout();\n        // Check if we're on transactions page - don't redirect or show toast\n        if (true) {\n            const currentPath = window.location.pathname;\n            if (currentPath.includes(\"/profile/transactions\")) {\n                return Promise.reject(error);\n            }\n        }\n        console.warn(\"Сессия истекла. Переход на страницу входа.\");\n        // Redirect to login page\n        if (true) {\n            window.location.href = \"/auth/login\";\n        }\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 403) {\n        console.warn(\"Нет прав для выполнения этого действия\");\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 500) {\n        var _response_data1;\n        console.error(\"Ошибка сервера 500:\", response.data);\n        // Добавляем дополнительную информацию об ошибке\n        error.serverError = true;\n        error.message = ((_response_data1 = response.data) === null || _response_data1 === void 0 ? void 0 : _response_data1.message) || \"Внутренняя ошибка сервера\";\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 404) {\n        console.warn(\"Ресурс не найден - API эндпоинт недоступен\");\n    // Не выбрасываем ошибку для 404, позволяем компонентам обработать fallback\n    } else if ((response === null || response === void 0 ? void 0 : response.status) >= 500) {\n        console.warn(\"Ошибка сервера. Попробуйте позже.\");\n    } else if (response === null || response === void 0 ? void 0 : (_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.message) {\n        console.warn(\"Ошибка:\", response.data.message);\n    } else if (error.code === \"ECONNABORTED\") {\n        console.warn(\"Превышено время ожидания\");\n    } else if (typeof navigator !== \"undefined\" && !navigator.onLine) {\n        console.warn(\"Проверьте подключение к интернету\");\n    }\n    return Promise.reject(error);\n});\n// Auth API\nconst authAPI = {\n    login: (credentials)=>api.post(\"/auth/login\", credentials),\n    register: (data)=>api.post(\"/auth/register\", data),\n    telegramAuth: (data)=>api.post(\"/auth/telegram\", data),\n    getProfile: ()=>api.get(\"/auth/me\"),\n    logout: ()=>api.post(\"/auth/logout\")\n};\n// Users API\nconst usersAPI = {\n    updateProfile: (data)=>api.put(\"/users/profile\", data),\n    getReferrals: ()=>api.get(\"/users/referrals\"),\n    getBalance: ()=>api.get(\"/users/balance\")\n};\n// Products API\nconst productsAPI = {\n    getProducts: (params)=>{\n        return api.get(\"/products\", {\n            params\n        });\n    },\n    getProduct: (id)=>{\n        return api.get(\"/products/\".concat(id));\n    },\n    createProduct: (data)=>api.post(\"/products\", data),\n    updateProduct: (id, data)=>api.put(\"/products/\".concat(id), data),\n    deleteProduct: (id)=>api.delete(\"/products/\".concat(id)),\n    getMyProducts: (params)=>api.get(\"/products/my/products\", {\n            params\n        })\n};\n// Campaigns API\nconst campaignsAPI = {\n    getCampaigns: (params)=>api.get(\"/campaigns\", {\n            params\n        }),\n    getCampaign: (id)=>api.get(\"/campaigns/\".concat(id)),\n    createCampaign: (data)=>api.post(\"/campaigns\", data),\n    updateCampaign: (id, data)=>api.put(\"/campaigns/\".concat(id), data),\n    startCampaign: (id)=>api.post(\"/campaigns/\".concat(id, \"/start\")),\n    pauseCampaign: (id)=>api.post(\"/campaigns/\".concat(id, \"/pause\")),\n    deleteCampaign: (id)=>api.delete(\"/campaigns/\".concat(id)),\n    recordClick: (id)=>api.post(\"/campaigns/\".concat(id, \"/click\")),\n    getMyCampaigns: (params)=>api.get(\"/campaigns/my/campaigns\", {\n            params\n        })\n};\n// Transactions API\nconst transactionsAPI = {\n    getTransactions: (params)=>api.get(\"/transactions\", {\n            params\n        }),\n    getAllData: ()=>api.get(\"/transactions/all-data\"),\n    requestWithdrawal: (data)=>api.post(\"/transactions/withdrawal\", data),\n    getStats: (params)=>api.get(\"/transactions/stats\", {\n            params\n        }),\n    cancelTransaction: (id)=>api.post(\"/transactions/\".concat(id, \"/cancel\"))\n};\n// Deals API\nconst dealsAPI = {\n    getDeals: (params)=>api.get(\"/deals\", {\n            params\n        }),\n    getDeal: (id)=>api.get(\"/deals/\".concat(id)),\n    createDeal: (data)=>api.post(\"/deals\", data),\n    updateDeal: (id, data)=>api.put(\"/deals/\".concat(id), data),\n    cancelDeal: (id)=>api.post(\"/deals/\".concat(id, \"/cancel\")),\n    getMyDeals: (params)=>api.get(\"/deals/my/deals\", {\n            params\n        })\n};\n// Payment API\nconst paymentAPI = {\n    createPayment: (data)=>api.post(\"/payment/create\", data),\n    quickCreatePayment: (data)=>api.post(\"/payment/quick-create\", data),\n    getPayment: (id)=>api.get(\"/payment/\".concat(id)),\n    confirmPayment: (id)=>api.post(\"/payment/\".concat(id, \"/confirm\")),\n    cancelPayment: (id)=>api.post(\"/payment/\".concat(id, \"/cancel\"))\n};\n// Admin API\nconst adminAPI = {\n    getStats: ()=>api.get(\"/admin/stats\"),\n    getUsers: (params)=>api.get(\"/admin/users\", {\n            params\n        }),\n    createUser: (data)=>api.post(\"/admin/users\", data),\n    updateUser: (userId, data)=>api.put(\"/admin/users/\".concat(userId), data),\n    blockUser: (userId, data)=>api.post(\"/admin/users/\".concat(userId, \"/block\"), data),\n    unblockUser: (userId)=>api.post(\"/admin/users/\".concat(userId, \"/unblock\")),\n    verifyUser: (userId)=>api.post(\"/admin/users/\".concat(userId, \"/verify\")),\n    getProducts: (params)=>api.get(\"/admin/products\", {\n            params\n        }),\n    createProduct: (data)=>api.post(\"/admin/products\", data),\n    updateProduct: (productId, data)=>api.put(\"/admin/products/\".concat(productId), data),\n    deleteProduct: (productId)=>api.delete(\"/admin/products/\".concat(productId)),\n    getDeals: (params)=>api.get(\"/admin/deals\", {\n            params\n        }),\n    updateDealStatus: (dealId, status)=>{\n        const statusValue = typeof status === \"string\" ? status : status.status;\n        return api.put(\"/admin/deals/\".concat(dealId, \"/status\"), {\n            status: statusValue\n        });\n    },\n    closeDeal: (dealId)=>api.post(\"/admin/deals/\".concat(dealId, \"/close\")),\n    openDeal: (dealId)=>api.post(\"/admin/deals/\".concat(dealId, \"/open\")),\n    cancelDeal: (dealId)=>api.post(\"/admin/deals/\".concat(dealId, \"/cancel\")),\n    disputeDeal: (dealId)=>api.post(\"/admin/deals/\".concat(dealId, \"/dispute\")),\n    resolveDispute: (dealId, data)=>api.post(\"/admin/deals/\".concat(dealId, \"/resolve-dispute\"), data)\n};\n// Support API\nconst supportAPI = {\n    getTickets: (params)=>{\n        return api.get(\"/support/tickets\", {\n            params\n        });\n    },\n    createTickets: (text)=>{\n        return api.post(\"/support/tickets\", {\n            text\n        });\n    },\n    replyToTicket: (ticketId, text)=>{\n        return api.post(\"/support/\".concat(ticketId, \"/reply\"), {\n            text\n        });\n    },\n    getMessages: (params)=>{\n        return api.get(\"/support/messages\", {\n            params\n        });\n    }\n};\n// Upload API\nconst uploadAPI = {\n    uploadFile: (file)=>{\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        return api.post(\"/upload/file\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n    },\n    uploadFiles: (files)=>{\n        const formData = new FormData();\n        files.forEach((file)=>formData.append(\"files\", file));\n        return api.post(\"/upload/files\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n    },\n    uploadAvatar: (file)=>{\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        return api.post(\"/upload/avatar\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n    },\n    deleteFile: (filename)=>api.delete(\"/upload/file/\".concat(filename)),\n    getFileInfo: (filename)=>api.get(\"/upload/file/\".concat(filename, \"/info\"))\n};\n// Statistics API\nconst statisticsAPI = {\n    getUserStats: (params)=>api.get(\"/statistics/user\", {\n            params\n        }),\n    getProductStats: (productId, params)=>api.get(\"/statistics/product/\".concat(productId), {\n            params\n        }),\n    getSalesStats: (params)=>api.get(\"/statistics/sales\", {\n            params\n        }),\n    // Manager statistics\n    getManagerStats: ()=>api.get(\"/statistics/manager\"),\n    getUsersStats: ()=>api.get(\"/statistics/users\"),\n    getRecentActivities: ()=>api.get(\"/statistics/activities\")\n};\n// Moderation API\nconst moderationAPI = {\n    getPendingProducts: (params)=>api.get(\"/moderation/products\", {\n            params\n        }),\n    getPendingUsers: (params)=>api.get(\"/moderation/users\", {\n            params\n        }),\n    approveProduct: (id)=>api.put(\"/moderation/products/\".concat(id, \"/approve\")),\n    rejectProduct: (id, reason)=>api.put(\"/moderation/products/\".concat(id, \"/reject\"), {\n            reason\n        }),\n    approveUser: (id)=>api.put(\"/moderation/users/\".concat(id, \"/approve\")),\n    rejectUser: (id, reason)=>api.put(\"/moderation/users/\".concat(id, \"/reject\"), {\n            reason\n        }),\n    getModerationStats: ()=>api.get(\"/moderation/stats\")\n};\n// Profile API\nconst profileAPI = {\n    getPayments: ()=>api.get(\"/users/payments\"),\n    addPaymentMethod: (data)=>api.post(\"/users/payments\", data),\n    removePaymentMethod: (paymentId)=>api.delete(\"/users/payments/\".concat(paymentId)),\n    getTransactions: ()=>api.get(\"/transactions/all-data\"),\n    createPayment: (data)=>api.post(\"/payment/create\", data),\n    // Social methods\n    getSocialLinks: ()=>api.get(\"/social/links\"),\n    createSocialLink: (data)=>api.post(\"/social/links\", data),\n    updateSocialLink: (id, data)=>api.put(\"/social/links/\".concat(id), data),\n    deleteSocialLink: (id)=>api.delete(\"/social/links/\".concat(id)),\n    getUserData: (platform, username)=>api.get(\"/social/user-data/\".concat(platform, \"/\").concat(username)),\n    getUserDataByBody: (data)=>api.post(\"/social/user-data\", data),\n    validateSocialLink: (data)=>api.post(\"/social/validate\", data),\n    getSupportedPlatforms: ()=>api.get(\"/social/platforms\"),\n    // Verification methods\n    getVerificationStatus: ()=>api.get(\"/users/verification\"),\n    submitVerification: (data)=>api.post(\"/users/verification\", data)\n};\n// Notifications API\nconst notificationsAPI = {\n    getNotifications: (params)=>api.get(\"/users/notifications\", {\n            params\n        }),\n    getNotificationSettings: ()=>api.get(\"/users/notification-settings\"),\n    updateNotificationSettings: (data)=>api.put(\"/users/notifications\", data),\n    markAsRead: (notificationId)=>api.put(\"/users/notifications/\".concat(notificationId, \"/read\")),\n    markAllAsRead: ()=>api.put(\"/users/notifications/read-all\"),\n    getTestNotifications: ()=>api.get(\"/users/test-notifications\")\n};\n// Verification API\nconst verificationAPI = {\n    getStatus: ()=>api.get(\"/users/verification\"),\n    submitDocuments: (data)=>api.post(\"/users/verification\", data),\n    getDocumentTypes: ()=>api.get(\"/verification/document-types\"),\n    getVerificationHistory: ()=>api.get(\"/verification/history\")\n};\n// Social API\nconst socialAPI = {\n    getLinks: ()=>api.get(\"/social/links\"),\n    createLink: (data)=>api.post(\"/social/links\", data),\n    updateLink: (id, data)=>api.put(\"/social/links/\".concat(id), data),\n    deleteLink: (id)=>api.delete(\"/social/links/\".concat(id)),\n    getUserData: (platform, username)=>api.get(\"/social/user-data/\".concat(platform, \"/\").concat(username)),\n    getUserDataByBody: (data)=>api.post(\"/social/user-data\", data),\n    validateLink: (data)=>api.post(\"/social/validate\", data),\n    getSupportedPlatforms: ()=>api.get(\"/social/platforms\")\n};\n// Academy API\nconst academyAPI = {\n    getCourses: (params)=>api.get(\"/academy/courses\", {\n            params\n        }),\n    getCourse: (courseId)=>api.get(\"/academy/courses/\".concat(courseId)),\n    getLessons: (courseId)=>api.get(\"/academy/courses/\".concat(courseId, \"/lessons\")),\n    getLesson: (courseId, lessonId)=>api.get(\"/academy/courses/\".concat(courseId, \"/lessons/\").concat(lessonId)),\n    markLessonComplete: (courseId, lessonId)=>api.post(\"/academy/courses/\".concat(courseId, \"/lessons/\").concat(lessonId, \"/complete\")),\n    getProgress: (courseId)=>api.get(\"/academy/progress\", {\n            params: courseId ? {\n                courseId\n            } : {}\n        })\n};\n// Affiliate API\nconst affiliateAPI = {\n    getStats: ()=>api.get(\"/affiliate/stats\"),\n    getReferralStats: ()=>api.get(\"/affiliate/stats\"),\n    getReferrals: (params)=>api.get(\"/affiliate/referrals\", {\n            params\n        }),\n    getCommissions: (params)=>api.get(\"/affiliate/commissions\", {\n            params\n        }),\n    requestPayout: (data)=>api.post(\"/affiliate/payout\", data),\n    getPayoutHistory: (params)=>api.get(\"/affiliate/payouts\", {\n            params\n        })\n};\n// Telegram API\nconst telegramAPI = {\n    getUserInfo: (telegramId)=>api.get(\"/telegram/user/\".concat(telegramId)),\n    getUserPhoto: (telegramId)=>api.get(\"/telegram/user/\".concat(telegramId, \"/photo\")),\n    searchUser: (username)=>api.get(\"/telegram/search/\".concat(username)),\n    verifyUser: (telegramId, data)=>api.post(\"/telegram/verify/\".concat(telegramId), data),\n    connectAccount: (data)=>api.post(\"/social/connect\", data),\n    getSocialLinks: ()=>api.get(\"/social/links\"),\n    updateSocialLink: (linkId, data)=>api.put(\"/social/links/\".concat(linkId), data),\n    deleteSocialLink: (linkId)=>api.delete(\"/social/links/\".concat(linkId)),\n    verifyTelegram: (telegramId, data)=>api.post(\"/telegram/verify/\".concat(telegramId), data)\n};\n// Images API\nconst imagesAPI = {\n    getImagesByCategory: (category, params)=>api.get(\"/images/category/\".concat(category), {\n            params\n        }),\n    getRandomProductImages: (params)=>api.get(\"/images/random/products\", {\n            params\n        }),\n    getRandomAvatars: (params)=>api.get(\"/images/random/avatars\", {\n            params\n        }),\n    initializeImages: ()=>api.post(\"/images/initialize\"),\n    updateProductImages: ()=>api.post(\"/images/update-products\"),\n    updateUserAvatars: ()=>api.post(\"/images/update-avatars\")\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});